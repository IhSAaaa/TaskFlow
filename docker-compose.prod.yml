services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres-prod
    environment:
      POSTGRES_DB: taskflow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
    ports:
      - "25432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database:/docker-entrypoint-initdb.d
    networks:
      - taskflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskflow-redis-prod
    ports:
      - "26379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskflow-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./backend
      dockerfile: auth-service/Dockerfile
    container_name: taskflow-auth-service-prod
    environment:
      NODE_ENV: production
      AUTH_SERVICE_PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-prod}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    container_name: taskflow-user-service-prod
    environment:
      NODE_ENV: production
      USER_SERVICE_PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # Task Service
  task-service:
    build:
      context: ./backend
      dockerfile: task-service/Dockerfile
    container_name: taskflow-task-service-prod
    environment:
      NODE_ENV: production
      TASK_SERVICE_PORT: 3003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # Project Service
  project-service:
    build:
      context: ./backend
      dockerfile: project-service/Dockerfile
    container_name: taskflow-project-service-prod
    environment:
      NODE_ENV: production
      PROJECT_SERVICE_PORT: 3004
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./backend
      dockerfile: notification-service/Dockerfile
    container_name: taskflow-notification-service-prod
    environment:
      NODE_ENV: production
      NOTIFICATION_SERVICE_PORT: 3005
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3005:3005"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # Tenant Service
  tenant-service:
    build:
      context: ./backend
      dockerfile: tenant-service/Dockerfile
    container_name: taskflow-tenant-service-prod
    environment:
      NODE_ENV: production
      TENANT_SERVICE_PORT: 3006
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3006:3006"
    depends_on:
      - postgres
      - redis
    networks:
      - taskflow-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    container_name: taskflow-api-gateway-prod
    environment:
      NODE_ENV: production
      GATEWAY_PORT: 8000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD:-taskflow_prod_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-prod}
      AUTH_SERVICE_URL: http://auth-service:3001
      USER_SERVICE_URL: http://user-service:3002
      TASK_SERVICE_URL: http://task-service:3003
      PROJECT_SERVICE_URL: http://project-service:3004
      NOTIFICATION_SERVICE_URL: http://notification-service:3005
      TENANT_SERVICE_URL: http://tenant-service:3006
    ports:
      - "28000:8000"
    depends_on:
      - postgres
      - redis
      - auth-service
      - user-service
      - task-service
      - project-service
      - notification-service
      - tenant-service
    networks:
      - taskflow-network
    restart: unless-stopped

  # Frontend Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskflow-frontend-prod
    environment:
      VITE_API_URL: ${NGROK_URL:-http://localhost:28000}
    ports:
      - "23000:3000"
    depends_on:
      - api-gateway
    networks:
      - taskflow-network
    restart: unless-stopped

  # Ngrok for exposing the application (only if NGROK_AUTHTOKEN is set)
  ngrok:
    image: ngrok/ngrok:latest
    container_name: taskflow-ngrok
    ports:
      - "24040:4040"  # Ngrok web interface
    depends_on:
      - frontend
    networks:
      - taskflow-network
    restart: "no"  # Don't auto-restart to avoid conflicts
    profiles:
      - ngrok
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: http frontend:3000

volumes:
  postgres_data:
  redis_data:

networks:
  taskflow-network:
    driver: bridge 